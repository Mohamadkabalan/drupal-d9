<?php
/**
 * @file
 * Contains custom_layout.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\custom_layout\Form\CustomLayoutBuilderConfigureSectionForm;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function custom_layout_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $block = $variables['elements'];
  $blockType = $block['#configuration']['provider'];
  $bundle = false;
  if ($blockType == "block_content") {
    if (isset($block['content']['content'])) {
      $bundle = $block['content']['content']['#block_content']->bundle();
    }
    else {
      $bundle = $block['content']['#block_content']->bundle();
    }
    if ($bundle) {
      array_splice($suggestions, 1, 0, 'block__bundle__' . $bundle);
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the configuration form for layout builder sections (layouts).
 */
function custom_layout_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {

  /** @var Drupal\custom_layout\Form\CustomLayoutBuilderConfigureSectionForm $form_object */
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof CustomLayoutBuilderConfigureSectionForm) {
    $layout = $form_object->getLayout();
    $template = $layout->getPluginDefinition()->getTemplate();
    $config = $layout->getConfiguration();

    $selected_columns_width = $config['custom_layout']['columns_width'] ?? '50/50';
    $selected_separator = $config['custom_layout']['separator'] ?? NULL;
    $selected_section_width = $config['custom_layout']['section_width'] ?? '0';
    $selected_color = $config['custom_layout']['color'] ?? NULL;
    $selected_media = $config['custom_layout']['media'] ?? NULL;
    $selected_position = $config['custom_layout']['position'] ?? 'center center';
    $selected_padding_top = $config['custom_layout']['padding_top'] ?? '0px';
    $selected_padding_bottom = $config['custom_layout']['padding_bottom'] ?? '0px';

    $form['actions']['#weight'] = 100;

    $form['section'] = [
      '#type' => 'details',
      '#title' => t('Section'),
      '#open' => TRUE,
      '#weight' => 95,
    ];

    $form['section']['section_width'] = [
      '#type' => 'radios',
      '#title' => t('Section width'),
      '#default_value' => $selected_section_width,
      '#options' => array(
        0 => t('Container'),
        1 => t('Full width'),
        2 => t('Full width(with container)'),
      ),
    ];

    $form['padding'] = [
      '#type' => 'details',
      '#title' => t('Padding top/bottom'),
      '#open' => TRUE,
      '#weight' => 95,
    ];

    $form['padding']['padding_top'] = [
      '#type' => 'select',
      '#title' => t('Padding top'),
      '#options' => [
        '0px' => t('0px'),
        '30px' => t('30px'),
        '40px' => t('40px'),
        '50px' => t('50px'),
        '60px' => t('60px'),
        '70px' => t('70px'),
        '80px' => t('80px'),
        '90px' => t('90px'),
      ],
      '#default_value' => $selected_padding_top,
    ];

    $form['padding']['padding_bottom'] = [
      '#type' => 'select',
      '#title' => t('Padding bottom'),
      '#options' => [
        '0px' => t('0px'),
        '30px' => t('30px'),
        '40px' => t('40px'),
        '50px' => t('50px'),
        '60px' => t('60px'),
        '70px' => t('70px'),
        '80px' => t('80px'),
        '90px' => t('90px'),
      ],
      '#default_value' => $selected_padding_bottom,
    ];

    if ($template == 'two-columns' || $template == 'three-columns' || $template == 'stacked-columns') {
      $form['columns'] = [
        '#type' => 'details',
        '#title' => t('Columns'),
        '#open' => TRUE,
        '#weight' => 95,
      ];

      $form['columns']['separator'] = [
        '#type' => 'checkbox',
        '#title' => t('separator'),
        '#default_value' => $selected_separator,
        '#description' => t('Add a vertical separator between columns'),
      ];
    }

    if ($template == 'two-columns' || $template == 'stacked-columns' || $template == 'columns-in-columns') {

      $form['columns']['columns_width'] = [
        '#type' => 'select',
        '#title' => t('Columns width'),
        '#options' => [
          '50/50' => t('50%/50%'),
          '30/70' => t('30%/70%'),
          '70/30' => t('70%/30%'),
          '60/40' => t('60%/40%'),
          '40/60' => t('40%/60%'),
          '20/80' => t('20%/80%'),
          '80/20' => t('80%/20%'),
        ],
        '#default_value' => $selected_columns_width,
      ];
    }

    $form['background'] = [
      '#type' => 'details',
      '#title' => t('Background'),
      '#open' => TRUE,
      '#weight' => 95,
    ];
    $form['background']['color'] = [
      '#type' => 'textfield',
      '#title' => t('Color'),
      '#default_value' => $selected_color,
      '#description' => t('A valid <a href="https://developer.mozilla.org/docs/Web/CSS/color_value">CSS color</a> (Ex: "#336699", "red", "rgba(0,0,0,.5)", etc.'),
    ];
    $form['background']['media'] = [
      '#type' => 'media_library',
      '#allowed_bundles' => ['image'],
      '#title' => t('Image'),
      '#default_value' => $selected_media,
      '#description' => t('Upload or select a background image.'),
    ];
    $form['background']['position'] = [
      '#type' => 'select',
      '#title' => t('Background position'),
      '#options' => [
        'left top' => t('left top'),
        'left center' => t('left center'),
        'left bottom' => t('left bottom'),
        'center top' => t('center top'),
        'center center' => t('center center'),
        'center bottom' => t('center bottom'),
        'right top' => t('right top'),
        'right center' => t('right center'),
        'right bottom' => t('right bottom'),
      ],
      '#default_value' => $selected_position,
    ];

    // Our submit handler must execute before the default one, because the
    // default handler stores the section & component data in the tempstore
    // and we need to update those objects before that happens.
    array_unshift($form['#submit'], '_custom_layout_section_form_submit');
  }

}

/**
 * Custom submit handler for submitting Layout Builder section forms.
 *
 * This is used to persist the selected media item to the layout configuration
 * array, which layout builder's ConfigureSectionForm will persist to section
 * storage.
 */
function _custom_layout_section_form_submit(array $form, FormStateInterface $form_state) {

  /** @var Drupal\layout_builder_styles\Form\ConfigureSectionForm $form_object */
  $form_object = $form_state->getFormObject();
  $config = $form_object->getLayout()->getConfiguration();
  if (!$config) {
    $config = [];
  }

  $color = $form_state->getValue(['background', 'color']) ?? NULL;
  $media = $form_state->getValue(['background', 'media']) ?? NULL;
  $position = $form_state->getValue(['background', 'position']) ?? NULL;
  $columns_width = $form_state->getValue(['columns', 'columns_width']) ?? NULL;
  $separator = $form_state->getValue(['columns', 'separator']) ?? NULL;
  $section_width = $form_state->getValue(['section', 'section_width']) ?? NULL;
  $padding_top = $form_state->getValue(['padding', 'padding_top']) ?? NULL;
  $padding_bottom = $form_state->getValue(['padding', 'padding_bottom']) ?? NULL;

  // Only set this module's settings if a background is set.
  if ($color || $media || $columns_width || $section_width || $padding_top || $padding_bottom || $separator) {
    $custom_layout_config = [
      'custom_layout' => [
        'color' => $color,
        'media' => $media,
        'position' => $position,
        'columns_width' => $columns_width,
        'separator' => $separator,
        'section_width' => $section_width,
        'padding_top' => $padding_top,
        'padding_bottom' => $padding_bottom
      ],
    ];
    $config = array_merge($config, $custom_layout_config);
  }

  // Otherwise, remove settings if they exist. This would occur in the case
  // where a section previously had background settings but they were removed.
  else {
    unset($config['custom_layout']);
  }

  $form_object
    ->getLayout()
    ->setConfiguration($config);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function custom_layout_preprocess_layout(&$variables) {

  // Apply a background to a layout by adding inline CSS if one is set.

  if (isset($variables['settings']['custom_layout'])) {
    $config = $variables['settings']['custom_layout'];
    $color = $config['color'] ?? NULL;
    $media = $config['media'] ?? NULL;
    $position = $config['position'] ?? NULL;
    $columns_width = $config['columns_width'] ?? NULL;
    $separator = $config['separator'] ?? NULL;
    $section_width = $config['section_width'] ?? NULL;
    $padding_top = $config['padding_top'] ?? NULL;
    $padding_bottom = $config['padding_bottom'] ?? NULL;
    $new_classes = [];
    $new_styles = [];

    // Add a generic class to indicate a background is specified.
    if ($media || $color) {
      $new_classes[] = 'layout-builder-backgrounds';
    }

    if ($separator) {
      $new_classes[] = 'separator';
    }

    if ($color) {
      $new_styles[] = 'background-color: ' . $color . ';';
    }

    if ($padding_top) {
      $new_styles = array_merge($new_styles, ['padding-top: ' . $padding_top . ';']);
    }

    if ($padding_bottom) {
      $new_styles = array_merge($new_styles, ['padding-bottom: ' . $padding_bottom . ';']);
    }

    if ($media) {
      $media_entity = Media::load($media);
      if ($media_entity) {
        $fid = $media_entity->getSource()->getSourceFieldValue($media_entity);
        $file = File::load($fid);
        $url = $file->url();
        $media_image_styles = [
          'background-image: url(' . $url . ');',
          'background-position: ' . $position . ';',
          'background-size: cover;',
          'background-repeat: no-repeat;',
        ];
        $new_styles = array_merge($new_styles, $media_image_styles);
      }
    }

    if ($columns_width) {
      $columns_width = explode('/', $columns_width);
      $new_classes[] = 'layout--custom-' . $columns_width[0] . '-' . $columns_width[1];
    }

    switch ($section_width) {
      case '0':
        $new_classes[] = 'container';
        break;
      case '1':
        $new_classes[] = 'full-width';
        break;
      case '2':
        $new_classes[] = 'full-width with-container';
        $variables['add_container'] = true;
        break;
    }

    // Update class attribute.
    if (!isset($variables['attributes']['class']) || !is_array($variables['attributes']['class'])) {
      $variables['attributes']['class'] = [];
    }
    $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $new_classes);

    // Update style attribute.
    if (!isset($variables['attributes']['style']) || !is_array($variables['attributes']['style'])) {
      $variables['attributes']['style'] = [];
    }
    $variables['attributes']['style'] = array_merge($variables['attributes']['style'], $new_styles);

  }
}

/**
 * Implements hook_help().
 */
function custom_layout_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the custom_layout module.
    case 'help.page.custom_layout':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds a background field to Layout Builder layouts.') . '</p>';
      return $output;

    default:
  }
}

